// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    hashedPassword String
    emailVerified  DateTime?
    avatar         String?
    accounts       Account[]
    sessions       Session[]
    file           File[]
    message        Message[]

    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
    PENDING
    PROCESSING
    FAILED
    SUCCESS
}

model File {
    id   String @id @default(cuid())
    name String

    uploadStatus UploadStatus @default(PENDING)

    url     String
    key     String
    message Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model Message {
    id   String @id @default(cuid())
    text String

    isUserMessage Boolean

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    file      File?    @relation(fields: [fileId], references: [id])
    fileId    String?
}
